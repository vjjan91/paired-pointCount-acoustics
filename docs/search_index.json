[["index.html", "Source code and supporting information for Predicting bird species abundances from acoustic data Section 1 Introduction 1.1 Attribution 1.2 Data access 1.3 Data processing", " Source code and supporting information for Predicting bird species abundances from acoustic data Vijay Ramesh Divya Mudappa T R Shankar Raman Laurel B Symes Last compiled on 07 May, 2025 Section 1 Introduction This is the readable version that showcases analyses comparing point count data and acoustic data for a tropical bird community in the Western Ghats. 1.1 Attribution Please contact the following in case of interest in the project. Vijay Ramesh (repo maintainer) Postdoctoral Research Associate, Cornell Lab of Ornithology 1.2 Data access The data used in this work will be archived on Zenodo. 1.3 Data processing The data processing for this project is described in the following sections. Navigate through them using the links in the sidebar. "],["exploring-point-count-data.html", "Section 2 Exploring point-count data 2.1 Install required libraries 2.2 Loading point-count data 2.3 Load site level information and create gridded data 2.4 Extract species-level information 2.5 Visualizing richness data across seasons 2.6 Visualizing abundance by species across seasons", " Section 2 Exploring point-count data In this script, we will explore the point-count data to understand bird species diversity patterns across seasons. For this analysis, we rely on two seasons of point-count data, that was carried out in June 2024 and Dec 2024. 2.1 Install required libraries library(tidyverse) library(dplyr) library(stringr) library(vegan) library(ggplot2) library(scico) library(data.table) library(extrafont) library(sf) library(raster) # for plotting library(scales) library(ggplot2) library(ggspatial) library(colorspace) library(scico) library(paletteer) # Source any custom/other internal functions necessary for analysis source(&quot;code/01_internal-functions.R&quot;) 2.2 Loading point-count data # load two seasons of point-count data point_counts &lt;- read.csv(&quot;data/point-count-data.csv&quot;) # removing all mammal species and unidentified bird species point_counts &lt;- point_counts %&gt;% filter(birdMamm == &quot;Bird&quot;) # Using gsub to remove text within parentheses including the parentheses point_counts$eBirdIndiaName2023 &lt;- gsub(&quot;\\\\s*\\\\([^\\\\)]+\\\\)&quot;, &quot;&quot;, point_counts$eBirdIndiaName2023) # add species scientific name to the point-count data sci_name &lt;- read.csv(&quot;data/species-taxonomy.csv&quot;) sci_name$eBirdIndiaName2023 &lt;- gsub(&quot;\\\\s*\\\\([^\\\\)]+\\\\)&quot;, &quot;&quot;, sci_name$eBirdIndiaName2023) # add scientific_name to the point_count data point_counts &lt;- left_join(point_counts[,-7], sci_name[,-c(1,2,4)]) # rename columns names(point_counts)[4] &lt;- &quot;start_time&quot; names(point_counts)[7] &lt;- &quot;common_name&quot; names(point_counts)[12] &lt;- &quot;scientific_name&quot; # write to file write.csv(point_counts, &quot;results/cleaned-point-count-data.csv&quot;, row.names = F) 2.3 Load site level information and create gridded data # we write a function below to create a grid around the centroid of each location of size 1ha # the grid is primarily created for visualizing species richness &amp; other associated metrics (this step is optional) # function to create square grid around a point create_square_grid &lt;- function(lon, lat, size_ha = 1) { # convert hectares to degrees (approximate conversion) # 1 ha = 100m x 100m # at the equator, 1 degree is approximately 111,320 meters # so we need to convert 100m to degrees size_degrees &lt;- sqrt(size_ha) * 100 / 111320 # Create a square polygon coords &lt;- matrix(c( lon - size_degrees/2, lat - size_degrees/2, # bottom left lon + size_degrees/2, lat - size_degrees/2, # bottom right lon + size_degrees/2, lat + size_degrees/2, # top right lon - size_degrees/2, lat + size_degrees/2, # top left lon - size_degrees/2, lat - size_degrees/2 # close the polygon ), ncol = 2, byrow = TRUE) # Create polygon pol &lt;- st_polygon(list(coords)) return(pol) } # function to obtain the latitude and longitude from a .csv file and create an associated shapefile create_grid_shapefile &lt;- function(csv_path, output_shp, lon_col = &quot;longitude&quot;, lat_col = &quot;latitude&quot;) { # read CSV file data &lt;- read.csv(csv_path) # create list to store polygons polygons &lt;- list() # create square grid for each point for(i in 1:nrow(data)) { polygons[[i]] &lt;- create_square_grid( data[[lon_col]][i], data[[lat_col]][i] ) } # convert to sf object grid_sf &lt;- st_sf( # Include original data data, # Convert polygon list to geometry geometry = st_sfc(polygons, crs = 4326) ) # write to shapefile st_write(grid_sf, output_shp, driver = &quot;ESRI Shapefile&quot;, append = FALSE) return(grid_sf) } # site-level information sites &lt;- &quot;data/sites.csv&quot; grid_shp &lt;- &quot;data/candura_grids.shp&quot; # Create the grid shapefile grid_sf &lt;- create_grid_shapefile( csv_path = sites, output_shp = grid_shp, lon_col = &quot;decimalLongitude&quot;, # replace with your longitude column name lat_col = &quot;decimalLatitude&quot; # replace with your latitude column name ) 2.4 Extract species-level information # estimate abundance across all species for each grid and season abundance &lt;- point_counts %&gt;% group_by(gridID, common_name, seasonYear) %&gt;% summarise(abundance = sum(number)) %&gt;% ungroup() # unique species observed across seasons # in summer 82 unique species were detected summer_species &lt;- abundance %&gt;% filter(seasonYear == &quot;2024 Summer&quot;) %&gt;% distinct(common_name) # 89 unique species were detected in the winter winter_species &lt;- abundance %&gt;% filter(seasonYear == &quot;2024 Winter&quot;) %&gt;% distinct(common_name) # overall list of unique species detected in point counts # 107 unique species were detected across both seasons pc_species &lt;- abundance %&gt;% distinct(common_name) %&gt;% left_join(., sci_name[,-c(1,2,4)], by = c(&quot;common_name&quot; = &quot;eBirdIndiaName2023&quot;)) %&gt;% rename(., scientific_name = eBirdScientificName2023) # write to file write.csv(pc_species, &quot;results/species-in-point-counts.csv&quot;, row.names = F) # total abundance by species for each season across grids totAbundance_by_season &lt;- abundance %&gt;% group_by(common_name, seasonYear) %&gt;% summarise(totAbundance = sum(abundance)) # species most abundant across seasons include the Yellow-browed Bulbul, Southern Hill Myna, Crimson-backed Sunbird, Greater Racket-tailed Drongo # estimate richness for point count data (calculated for each site) richness &lt;- abundance %&gt;% mutate(forRichness = case_when(abundance &gt; 0 ~ 1)) %&gt;% group_by(gridID, seasonYear) %&gt;% summarise(richness = sum(forRichness)) %&gt;% ungroup() 2.5 Visualizing richness data across seasons # First, join your species data with the spatial data grid_with_richness &lt;- grid_sf %&gt;% left_join(richness, by = &quot;gridID&quot;) # Create the plot fig_richness_by_season &lt;- ggplot() + geom_sf(data = grid_with_richness, aes(fill = richness), alpha=0.9) + geom_sf_text(data = grid_with_richness, aes(label = paste(gridID, &quot;\\n&quot;, richness)), size = 2) + facet_wrap(~seasonYear) + scale_fill_scico(palette = &quot;lajolla&quot;)+ theme_minimal() + labs(fill = &quot;Species\\nRichness&quot;, title = &quot;Species Richness by Season&quot;) + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 14, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 14, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 14, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_blank()) ggsave(&quot;figs/fig_richness_by_season.png&quot;, plot = fig_richness_by_season, width = 14, height = 7, units = &quot;in&quot;, dpi = 300, bg = &quot;white&quot;) dev.off() Species richness by season 2.6 Visualizing abundance by species across seasons # join abundance data with the spatial data grid_with_abundance &lt;- grid_sf %&gt;% left_join(abundance, by = &quot;gridID&quot;) # first, let&#39;s create a base grid that has all possible combinations base_grid &lt;- grid_with_abundance %&gt;% dplyr::select(gridID, geometry) %&gt;% distinct() # get unique seasons seasons &lt;- unique(grid_with_abundance$seasonYear) # create a complete grid with all combinations complete_grid &lt;- base_grid %&gt;% crossing(seasonYear = seasons) %&gt;% st_sf() # get unique species list species_list &lt;- unique(grid_with_abundance$common_name) # create PDF pdf(&quot;figs/species_by_season_abundance.pdf&quot;, width = 14, height = 7) # loop through each species for(sp in species_list) { # get data for this species current_species_data &lt;- grid_with_abundance %&gt;% filter(common_name == sp) %&gt;% dplyr::select(gridID, seasonYear, abundance) %&gt;% st_drop_geometry() # join with complete grid plot_data &lt;- complete_grid %&gt;% left_join(current_species_data, by = c(&quot;gridID&quot;, &quot;seasonYear&quot;)) # Create plot p &lt;- ggplot() + geom_sf(data = plot_data, aes(fill = abundance), alpha = 0.9) + geom_sf_text(data = plot_data, aes(label = paste(gridID, &quot;\\n&quot;, ifelse(is.na(abundance), &quot;0&quot;, abundance))), size = 2) + facet_wrap(~seasonYear) + scale_fill_scico(palette = &quot;lajolla&quot;, na.value = &quot;grey80&quot;)+ theme_minimal() + theme(text = element_text(family = &quot;Century Gothic&quot;, size = 14, face = &quot;bold&quot;),plot.title = element_text(family = &quot;Century Gothic&quot;, size = 14, face = &quot;bold&quot;), plot.subtitle = element_text(family = &quot;Century Gothic&quot;, size = 14, face = &quot;bold&quot;,color=&quot;#1b2838&quot;), axis.title = element_blank()) + labs(fill = &quot;Abundance&quot;, title = paste(&quot;Abundance of&quot;, sp, &quot;by Season&quot;)) print(p) } dev.off() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
